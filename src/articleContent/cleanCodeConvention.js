module.exports = {
    title: 'Clean Code Convention',
    date: '21 June 2017',
    content: '<p>After I went through lot of research, I got this conventions from geeks who enormously shared their experience and best practices about coding via numerous courses on the internet. I will share some of my notes with the hope of helping some newbies out there.&nbsp; This blog is irrespective of one language or domain. So no matter which technology you are working currently. You can follow this conventions and it will rapidly polish your coding standards. Okay, let&rsquo;s dive in.</p><p>&ldquo;<a href="https://app.pluralsight.com/player?course=writing-clean-code-humans&amp;author=cory-house&amp;name=writing-clean-code-humans-m1-intro&amp;clip=0&amp;mode=live&amp;start=58"><strong>Any fool can write code that a computer can understand. Good programmers write code that humans can understand</strong>.</a>&rdquo; &ndash; Martin Fowler</p><p><strong>Core Rules:-</strong></p><ol><li>Never mix up two technologies in one file</li></ol><ul><li>eg: Never put HTML code in Javascript strings and vice versa</li></ul><ol start="2"><li>Code should not be excessively wordy</li><li>Intent should be very clear and expressive</li><li>Code (Method/Function) should do one thing at a time.</li><li>Clean up your code before next task.</li></ol><p>&nbsp;</p><p><strong>The Rule of 7</strong></p><p>Human memory cannot hold more than 7 item in a short-term memory, so the code, having more than 7 items in scope makes it difficult for the reader to comprehend the code. Thus use parameters or variable within this count.</p><p><strong>DRY principles</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong>It derives &ldquo;Don&rsquo;t Repeat yourself&rdquo;.&nbsp; <a href="https://app.pluralsight.com/player?course=writing-clean-code-humans&amp;author=cory-house&amp;name=writing-clean-code-humans-m2-principles&amp;clip=5&amp;mode=live&amp;start=35">Copy and paste is often a sign of a design problem and can easily be eliminated by creating a reusable function</a>&nbsp;<a href="https://app.pluralsight.com/player?course=writing-clean-code-humans&amp;author=cory-house&amp;name=writing-clean-code-humans-m2-principles&amp;clip=5&amp;mode=live&amp;start=41">or adding a parameter to an existing function to make it more flexible.</a> Always try to keep one logic separate. Never duplicate code. Our ultimate goal is minimizing the line in the code base. Few line of code co-related to fewer bugs.</p><p><strong>Self Documenting</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clearly written code is self documenting its purpose as you write. Understanding other programmer&rsquo;s intent is the biggest problem in the software development. So follow these:-</p><ol><li>Clear intent</li><li>Layer of abstractions</li><li>Format for readability</li><li>Favor code over comments</li></ol><p><strong>Naming Conventions</strong></p><p><strong>Variables</strong></p><p><strong>&nbsp; </strong>The thumb rule for naming is &ldquo;Name should be meaningful&rdquo; and self explanatory. Also Create variables very near to its first use.</p><p>&nbsp;</p><p>Bad Naming:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Good Naming:</p><p>&nbsp;&nbsp;&nbsp;&nbsp; l=0, t=3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; length = 0, total=3;</p><p><strong>Classes</strong></p><ul><li>Noun (ex: Animal, Vehicle)</li><li>UpperCamelcase (ex: VehicleMaintenance)</li><li>Should explain Single responsibility</li><li>Avoid generic suffixes like<ul><li>PricingVehicle</li><li>TestFunction</li></ul></li></ul><p>&nbsp;</p><p><strong>Method/Function</strong></p><ul><li>It should read what it does</li><li>Write name which is so descriptive</li><li>Avoid abbreviation (ex: regUser)</li><li>Avoid these:<ul><li>Get</li><li>Process</li><li>Pending</li></ul></li><li>Follow these:<ul><li>getRegisteredUsers</li><li>isValidSubmission</li><li>sendEmail</li></ul></li></ul><p>&nbsp;</p><p><strong>Boolean Naming</strong></p><ul><li>Avoid these:<ul><li>Open</li><li>Status</li></ul></li><li>Follow these:<ul><li>isOpen</li><li>isActive</li></ul></li></ul><p>&nbsp;</p><p><strong>Conditional checks</strong></p><p><strong>Boolean</strong></p><ul><li>Bad code:<ul><li>If(isActive === true)</li></ul></li><li>Clean code<ul><li>If(isActive)</li></ul></li></ul><p>&nbsp;</p><ul><li>Bad code:</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(mangoes &gt; 6) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isLog = true;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; isLog = false;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p><ul><li>Clean code:</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp; isLog =&nbsp;&nbsp; mangoes &gt; 6</p><p>&nbsp;</p><p><strong>Undefined&nbsp; numbers</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong>Bad code:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If (age &gt; 21)&nbsp; //what is 21?</p><p>Clean code:</p><p>&nbsp;&nbsp;&nbsp;&nbsp; Var legalAge = 21;</p><p>&nbsp;&nbsp;&nbsp;&nbsp; If(age &gt; legalAge)</p><p>&nbsp;</p><p>&hellip;&hellip;&hellip;&hellip;. Lot more code examples are yet to come.. I am working on by best&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;</p><p><strong>Functions structure rule</strong></p><ul><li>Rarely be 20 lines</li><li>Hardly over 100 lines</li><li>No more than 3 parameters</li><li>No more than 3 indentation</li><li>Simple function can be larger</li><li>Complex function can be shorter</li><li>Function call and function definition must be closer to reach immediately</li><li>If no room for above mentioned rules, break into separate functions, and follow the rules</li></ul><p><strong>&nbsp;</strong></p><p><strong>&nbsp;</strong></p><p><strong>Comments</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </strong>Comments are only necessary when following things occur:</p><ol><li>Todo (explains what needs to be done)</li><li>Summary (about the logic of the piece of code)</li><li>Documentaion (ex: commenting what inputs are valid for particular code)</li></ol><p>&nbsp;</p><p><strong>Avoid These Mistakes</strong></p><ol><li>Highly cyclomatic complexcity</li><li>Ensure indentation</li><li>Unnecessary comments</li><li>Poorly name structure</li><li>Huge classes</li><li>Long methods</li><li>Repetition</li><li>No whitespace</li><li>Overly verbose</li></ol><p>&nbsp;</p><p>Summary</p><p>&nbsp;&nbsp;&nbsp;&nbsp; Refactoring the code involves potential risk and its likely to break something which is working perfectly fine for long time. So never ever touch any code for your desire for cleanliness.&nbsp; I would like to wrap up this article with the quote.</p><p><strong>&nbsp;&ldquo; Always leave the code you&rsquo;re editing&nbsp; a little better than you found it&rdquo; &ndash; Robert C. Martin</strong></p><p>&nbsp;</p><p>Thanks for reading. Strive for clean code. All the best.</p>'
};